# src/jobs/build-image.yaml

description: |
  Secure oci compatible image build from dockerfile.

executor:
  name: circleci-python-builder
  executor-image: << parameters.executor-image >>
  resource-class: << parameters.executor-resource-class >>
shell: << parameters.shell >>

parameters:

  shell:
    description: Shell launch configuration. Can override to support process level tool options (1password, teller).
    type: string
    default: /bin/bash -eo pipefail

  executor-image:
    description: Specify executor image used by job.
    type: string
    default: twdps/circleci-python-builder:stable

  executor-resource-class:
    description: specify the resouce class for the image
    type: enum
    enum: [medium, large, xlarge, 2xlarge]
    default: medium

  registry:
    description: Name of DTR compatible registry. Can use private registry.
    type: string
    default: docker.io

  registry-login:
    description: Username for reigstry access.
    type: env_var_name
    default: DOCKER_LOGIN

  registry-password:
    description: Password for registry access.
    type: env_var_name
    default: DOCKER_PASSWORD

  dockerfile:
    description: Name of Dockerfile.
    type: string
    default: Dockerfile

  path:
    description: Path to the directory containing your Dockerfile and build context.
    type: string
    default: .

  image:
    description: Name of image.
    type: string

  tag:
    description: Value for image tag.
    type: string
    default: dev.${CIRCLE_SHA1:0:7}

  tag-annotation:
    description: (Optional) Additional text prepended to semantic version tag
    type: string
    default: ""

  extra-build-args:
    description: >
      (Optional) Extra flags to pass to docker build. For examples, see
      https://docs.docker.com/engine/reference/commandline/build
    type: string
    default: ""

  before-build:
    description: (Optional) Steps to run before Docker build.
    type: steps
    default: []

  after-build:
    description: (Optional) Steps to run Docker build.
    type: steps
    default: []

  after-push:
    description: (Optional) Steps to run after publishing the image to registry.
    type: steps
    default: []

steps:
  - checkout
  - setup_remote_docker
  - when:
      name: Run before_build lifecycle hook steps.
      condition: << parameters.before-build >>
      steps: << parameters.before-build >>
  - confirm-registry:
      registry: << parameters.registry >>
      registry-login: << parameters.registry-login >>
      registry-password: << parameters.registry-password >>
  - build:
      dockerfile: << parameters.dockerfile >>
      path: << parameters.path >>
      image: << parameters.image >>
      tag: << parameters.tag-annotation >><< parameters.tag >>
      registry: << parameters.registry >>
      extra-build-args: << parameters.extra-build-args >>
  # - when:
  #     name: Perform snyk cve scan
  #     condition: << parameters.image-cve-scan >>
  #     requires:
  #       - build
  #     steps:
  #       - cve-scan:
  #           registry: << parameters.registry >>
  #           image: << parameters.image >>
  #           tag: << parameters.tag-annotation >><< parameters.tag >>
  #           dockerfile: << parameters.dockerfile >>
  #           severity-threshold: << parameters.severity-threshold >>
  #           snyk-organization: << parameters.snyk-organization >>
  #           snyk-token: << parameters.snyk-token >>
  #           skip-base-image: << parameters.skip-base-image >>
  # - when:
  #     name: perform container smoke (liveness/readiness) test
  #     condition: << parameters.health-url >>
  #     requires:
  #       - build
  #     steps:
  #       - liveness:
  #           registry: << parameters.registry >>
  #           image: << parameters.image >>
  #           tag: << parameters.tag-annotation >><< parameters.tag >>
  #           port-definition: << parameters.port-definition >>
  #           health-url: << parameters.health-url>>
  #           startup-delay: << parameters.startup-delay >>
  #           docker-run-arguments: << parameters.docker-run-arguments >>
  # - when:
  #     name: Run after_build lifecycle hook steps.
  #     condition: << parameters.after-build >>
  #     steps: << parameters.after-build >>
  # - push:
  #     registry: << parameters.registry >>
  #     image: << parameters.image >>
  #     tag: << parameters.tag-annotation >><< parameters.tag >>
  # - when:
  #     name: Run after_push lifecycle hook steps.
  #     condition: << parameters.after-push >>
  #     steps: << parameters.after-push >>
