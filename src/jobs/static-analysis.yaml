# src/jobs/static-analysis.yaml

description: python, non-security static code analysis

executor:
  name: circleci-python-builder
  executor-image: << parameters.executor-image >>
  resource-class: << parameters.executor-resource-class >>
shell: << parameters.shell >>

parameters:

  shell:
    description: default shell invocation. Override to support different shells or tools like secrethub.io
    type: string
    default: /bin/sh -eo pipefail

  executor-image:
    description: specify machine executor
    type: string
    default: twdps/circleci-python-builder:stable

  executor-resource-class:
    description: specify executor resource class. Default is medium.
    type: enum
    enum: [small, medium, medium+, large, xlarge, 2xlarge, 2xlarge+]
    default: medium

  after-checkout:
    description: Optional steps to run after checking out the code.
    type: steps
    default: []

  virtualenv:
    description: use python virtual environment
    type: enum
    enum: ["pipenv", "none"]
    default: "none"

  install-dev:
    description: Install dev packages also. Not necessary if installed on executor
    type: boolean
    default: false

  lint-path:
    description: path of python files to run pylint against
    type: string
    default: "."

  report-coverage:
    description: report test coverage
    type: enum
    enum: ["codeclimate", "none"]
    default: "none"

  dockerfile:
    description: Name of dockerfile
    type: string
    default: Dockerfile

  after-analysis:
    description: Optional steps to run after static code analysis.
    type: steps
    default: []

steps:
  - checkout
  - setup_remote_docker
  - when:
      name: Run after_checkout lifecycle hook steps.
      condition: << parameters.after-checkout >>
      steps: << parameters.after-checkout >>
  - when:
      name: Setup virtual environment
      condition:
        not:
          equal: [ "none", << parameters.virtualenv >> ]
      steps:
          - python-env:
              virtualenv: << parameters.virtualenv >>
              install-dev: << parameters.install-dev >>

  - lint:
      lint-path: << parameters.lint-path >>
      virtualenv: << parameters.virtualenv >>
  - test-coverage:
      report-coverage: << parameters.report-coverage >>

  - when:
      name: Run after after analysis lifecycle hook steps.
      condition: << parameters.after-analysis >>
      steps: << parameters.after-analysis >>
