# src/jobs/static-analysis.yaml

description: python, non-security static code analysis

executor:
  name: circleci-python-builder
  executor-image: << parameters.executor-image >>
  resource-class: << parameters.executor-resource-class >>
shell: << parameters.shell >>

parameters:

  shell:
    description: default shell invocation. Override to support different shells or tools like secrethub.io
    type: string
    default: /bin/bash -eo pipefail

  executor-image:
    description: specify machine executor
    type: string
    default: twdps/circleci-python-builder:stable

  executor-resource-class:
    description: specify executor resource class. Default is medium
    type: enum
    enum: [small, medium, medium+, large, xlarge, 2xlarge, 2xlarge+]
    default: medium

  after-checkout:
    description: Optional steps to run after checking out the code
    type: steps
    default: []

  package-manager:
    description: Currently supports pip and pipenv
    type: enum
    enum: ["pipenv", "pip", "none"]
    default: "none"

  install-dev:
    description: Install dev packages also. Not necessary if installed on executor
    type: boolean
    default: false

  lint-path:
    description: path of python files to run pylint against
    type: string
    default: "."

  report-coverage:
    description: report test coverage
    type: enum
    enum: ["codeclimate", "none"]
    default: "none"

  dockerfile:
    description: Name of dockerfile
    type: string
    default: Dockerfile

  cis-docker-image-scan:
    description: perform CIS Docker Benchmark Section 4 assessment
    type: boolean
    default: false

  after-analysis:
    description: Optional steps to run after static code analysis
    type: steps
    default: []

steps:
  - checkout
  - setup_remote_docker
  - when:
      name: Run after_checkout lifecycle hook steps
      condition: << parameters.after-checkout >>
      steps: << parameters.after-checkout >>
  - packages:
      package-manager: << parameters.package-manager >>
      install-dev: << parameters.install-dev >>
  - lint:
      lint-path: << parameters.lint-path >>
      dockerfile: << parameters.dockerfile >>
  - test-coverage:
      report-coverage: << parameters.report-coverage >>
  - when:
      name: perform CIS Docker Benchmark section 4 scan
      condition: << parameters.cis-docker-image-scan >>
      steps:
        - cis-scan:
            dockerfile: << parameters.dockerfile >>
  - when:
      name: Run after after analysis lifecycle hook steps
      condition: << parameters.after-analysis >>
      steps: << parameters.after-analysis >>
