# src/jobs/oci-image-build.yaml
# yamllint disable rule:line-length
---

description: Secure oci compatible image build from dockerfile.

executor:
  name: machine-image
  executor-machine: << parameters.executor-machine >>
  resource-class: << parameters.executor-resource-class >>
shell: << parameters.shell >>

parameters:

  shell:
    description: default shell invocation. Override to support different shells or tools like secrethub.io
    type: string
    default: /bin/bash -eo pipefail

  executor-machine:
    description: specify machine executor
    type: string
    default: ubuntu-2404:current

  executor-resource-class:
    description: specify executor resource class. Default is medium.
    type: enum
    enum: [medium, large, xlarge, 2xlarge, 2xlarge+]
    default: medium

  registry:
    description: Name of DTR compatible registry. Can use private registry.
    type: string
    default: docker.io

  registry-login:
    description: Username for reigstry access.
    type: env_var_name
    default: DOCKER_LOGIN

  registry-password:
    description: Password for registry access.
    type: env_var_name
    default: DOCKER_PASSWORD

  dockerfile:
    description: Name of Dockerfile.
    type: string
    default: Dockerfile

  path:
    description: Path to the directory containing your Dockerfile and build context.
    type: string
    default: .

  image:
    description: Name of image.
    type: string

  tag:
    description: Value for image tag.
    type: string
    default: dev.${CIRCLE_SHA1:0:7}

  tag-annotation:
    description: (Optional) Additional text prepended to semantic version tag
    type: string
    default: ""

  test-tag:
    description: (ephemeral) tag for the local test image
    type: string
    default: "test"

  extra-build-args:
    description: >
      (Optional) Extra flags to pass to docker build. For examples, see
      https://docs.docker.com/engine/reference/commandline/build
    type: string
    default: ""

  image-cve-scan:
    description: perform snyk.io docker cve scan
    type: boolean
    default: false

  severity-threshold:
    description: snyk test reporting threshold
    type: string
    default: "low"

  snyk-organization:
    description: Trigger Scan results related to repository associated with organization created at snyk.io
    type: string
    default: ""

  snyk-token:
    description: snyk.io api-token
    type: env_var_name
    default: SNYK_TOKEN

  skip-base-image:
    description: optionally, skip performing cve scan of base image
    type: boolean
    default: false

  health-url:
    description: health or liveness
    type: string
    default: ""

  port-definition:
    description: docker run -p parameters
    type: string
    default: ""

  startup-delay:
    description: time to wait for service to startup and liveness endpoint to be available
    type: integer
    default: 3

  docker-run-arguments:
    description: additional Docker Run arguements
    type: string
    default: ""

  # attestations:
  #   description: attestations to include in signature
  #   type: string
  #   default: ""

  # sign-key:
  #   description: path to private key used to sign image
  #   type: string
  #   default: cosign.key

  # verify-key:
  #   description: path to public key used to verify signature
  #   type: string
  #   default: cosign.pub

  # cosign-password:
  #   description: signing key passphrase
  #   type: env_var_name
  #   default: COSIGN_PASSWORD

  # sbom-filename:
  #   description: name of generate sbom file
  #   type: string
  #   default: sbom.spdx

  before-build:
    description: (Optional) Steps to run before Docker build.
    type: steps
    default: []

  after-build:
    description: (Optional) Steps to run Docker build.
    type: steps
    default: []

  after-push:
    description: Optional steps to run after publishing the docker image
    type: steps
    default: []

steps:
  - checkout
  - when:
      name: Run before_build lifecycle hook steps.
      condition: << parameters.before-build >>
      steps: << parameters.before-build >>
  - confirm-registry:
      registry: << parameters.registry >>
      registry-login: << parameters.registry-login >>
      registry-password: << parameters.registry-password >>
  # perform standard docker build to build image only to local daemon filespace for testing
  - run:
      name: setup artifact workspace
      command: mkdir -p workspace
  - build:
      dockerfile: << parameters.dockerfile >>
      path: << parameters.path >>
      image: << parameters.image >>
      tag: << parameters.test-tag >>
      registry: << parameters.registry >>
      extra-build-args: << parameters.extra-build-args >>
  - when:
      name: Run after_build lifecycle hook steps.
      condition: << parameters.after-build >>
      steps: << parameters.after-build >>
  - when:
      name: Perform snyk cve scan
      condition: << parameters.image-cve-scan >>
      steps:
        - cve-scan:
            registry: << parameters.registry >>
            image: << parameters.image >>
            tag: << parameters.test-tag >>
            dockerfile: << parameters.dockerfile >>
            severity-threshold: << parameters.severity-threshold >>
            snyk-organization: << parameters.snyk-organization >>
            snyk-token: << parameters.snyk-token >>
            skip-base-image: << parameters.skip-base-image >>
  - when:
      name: perform container smoke (liveness/readiness) test
      condition: << parameters.health-url >>
      steps:
        - liveness:
            registry: << parameters.registry >>
            image: << parameters.image >>
            tag: << parameters.test-tag >>
            port-definition: << parameters.port-definition >>
            health-url: << parameters.health-url>>
            startup-delay: << parameters.startup-delay >>
            docker-run-arguments: << parameters.docker-run-arguments >>
  # if prior validations successful, now perform multi-arch build/push
  - buildx:
      dockerfile: << parameters.dockerfile >>
      path: << parameters.path >>
      image: << parameters.image >>
      tag: << parameters.tag-annotation >><< parameters.tag >>
      registry: << parameters.registry >>
      extra-build-args: << parameters.extra-build-args >>
  - when:
      name: Run after_push lifecycle hook steps.
      condition: << parameters.after-push >>
      steps: << parameters.after-push >>
  - persist-workspace
